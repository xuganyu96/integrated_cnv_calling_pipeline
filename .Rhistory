?install.packages
install.packages('nnls', lib = 'media/bruce/Stuff/File/uc-berkeley-document/job_and_internship/Jobs/veritas_genetics/main/detectors/CANOES/R_local_lib')
install.packages('Hmisc', lib = 'media/bruce/Stuff/File/uc-berkeley-document/job_and_internship/Jobs/veritas_genetics/main/detectors/CANOES/R_local_lib')
install.packages('mgcv', lib = 'media/bruce/Stuff/File/uc-berkeley-document/job_and_internship/Jobs/veritas_genetics/main/detectors/CANOES/R_local_lib')
install.packages('plyr', lib = 'media/bruce/Stuff/File/uc-berkeley-document/job_and_internship/Jobs/veritas_genetics/main/detectors/CANOES/R_local_lib')
setwd('/media/bruce/Stuff/File/uc-berkeley-document/job_and_internship/Jobs/veritas_genetics/main/detectors/CANOES')
?library
library(nnls, lib.loc = "./R_loc_lib/")
library(nnls, lib.loc = "./R_loc_lib/nnls_1.4.tar.gz")
library(Hmisc, lib.loc = "./R_loc_lib/")
library(Hmisc, lib.loc = "./R_loc_lib/Hmisc")
library(Hmisc, lib.loc = "./R_loc_lib")
library(Hmisc, lib.loc = "./R_loc_lib")
setwd('/media/bruce/Stuff/File/uc-berkeley-document/job_and_internship/Jobs/veritas_genetics/main/detectors/CANOES')
library(Hmisc, lib.loc = "./R_loc_lib")
library(Hmisc, lib.loc = "./R_loc_lib/Hmisc")
library(Hmisc, lib.loc = "./R_local_lib/Hmisc")
library(Hmisc, lib.loc = "./R_local_lib")
library(nnls, lib.loc = "./R_local_lib")
library(Hmisc, lib.loc = "./R_local_lib")
library(mgcv, lib.loc = "./R_local_lib")
library(plyr, lib.loc = "./R_local_lib")
print(getwd())
getwd()
getwd()
# Enable this line if and only if running in RStudio
running_from_rstudio <- TRUE
if(running_from_rstudio) {
path_to_main= '/media/bruce/Stuff/File/uc-berkeley-document/job_and_internship/Jobs/veritas_genetics/main/'
setwd(path_to_main)
}
print(getwd())
library(nnls, lib.loc = "./detectors/CANOES/R_local_lib")
library(Hmisc, lib.loc = "./detectors/CANOES/R_local_lib")
library(mgcv, lib.loc = "./detectors/CANOES/R_local_lib")
library(plyr, lib.loc = "./detectors/CANOES/R_local_lib")
# Read in the data and rename column names appropriately
gc <- read.table('./detectors_inputs/CANOES/gc.txt')$V2
canoes.reads <- read.table('./detectors_inputs/CANOES/canoes.reads.txt')
View(canoes.reads)
ncol(read.table('./detectors_inputs/CANOES/gc.txt'))
canoes.reads$V4[1]
canoes.reads <- read.table('./detectors_inputs/CANOES/canoes.reads.txt', stringsAsFactors = FALSE)
canoes.reads$V4[1]
is.string(canoes.reads$V4[1])
is.char(canoes.reads$V4[1])
is.character(canoes.reads$V4[1])
is.character(canoes.reads$V5[1])
is.character(canoes.reads$V3[1])
names(canoes.reads) <- c('chromosome',
'start',
'end',
'ivl_names')
drops <- c("ivl_name")
canoes.reads <- canoes.reads[ , !(names(canoes.reads) %in% drops)]
names(canoes.reads) <- c('chromosome',
'start',
'end',
'ivl_name')
drops <- c("ivl_name")
canoes.reads <- canoes.reads[ , !(names(canoes.reads) %in% drops)]
# If the fourth column of canoes.reads is string, then it is "names of the target intervals
# and hence useless
if(is.character(canoes.reads$V4)) {
names(canoes.reads) <- c('chromosome',
'start',
'end',
'ivl_name')
drops <- c("ivl_name")
canoes.reads <- canoes.reads[ , !(names(canoes.reads) %in% drops)]
}
sample_n <- ncol(canoes.reads) - 3
sample.names <- paste('S', seq(1:sample_n), sep='')
names(canoes.reads) <- c('chromosome',
'start',
'end',
sample.names)
print(colnames(canoes.reads))
# Create vector of consecutive target ids:
target <- seq(1, nrow(canoes.reads))
# Combine the data into one data frame
canoes.reads <- cbind(target, gc, canoes.reads)
# All code below will be used to call CNVs
source("./detectors/CANOES/CANOES_lib.R")
# Create a vectoor to hold the results for each sample
xcnv.list <- vector('list', sample_n)
# Call CNVs for each sample
for (i in 1:sample_n) {
xcnv.list[[i]] <- CallCNVs(sample.names[i], canoes.reads)
}
# combine the results into one data frame
xcnvs <- do.call('rbind', xcnv.list)
# Inspect the first two CNV calls
head(xcnvs, 2)
# output to file
write.csv(xcnvs, file = './detectors_outputs/CANOES/CNV_calls_canoes.csv')
# Plot all CNV calls
pdf('./detectors_outputs/CANOES/CNVplots.pdf')
for (i in 1:nrow(xcnvs)){
PlotCNV(canoes.reads, xcnvs[i, "SAMPLE"], xcnvs[i, "TARGETS"])
}
dev.off()
